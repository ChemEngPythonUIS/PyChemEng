{
  
    
        "post0": {
            "title": "Sistemas de ecuaciones lineales",
            "content": "Definici&#243;n de un sistema de ecuaciones lineales . Antes abordar la solución computacional de un sistema de ecuaciones lineales debemos definir estos sistemas en cuestión, así bien, la forma general de un sistema de este tipo es: . begin{equation} begin{gathered} a_{1,1} x_1+a_{1,2} x_2+ ldots+a_{1, n} x_n=b_1 a_{2,1} x_1+a_{2,2} x_2+ ldots+a_{2, n} x_n=b_2 vdots a_{n, 1} x_1+a_{n, 2} x_2+ ldots+a_{n, n} x_n=b_n end{gathered} end{equation}Donde $x_{i}$ representa las variables desconocidas que estamos intentando hallar, $a_{i}$ son los coeficientes que acompañan a dichas variables y $b_{i}$ son los coeficientes a los cuales están igualadas nuestras ecuaciones. También cabe resaltar que para la solución de sistemas hemos de tener el mismo numero de ecuaciones que de variables desconocidas, esto para evitar sobre especificar el sistema. Con base en lo anterior, podemos escribir nuestro sistema de ecuaciones de forma matricial . begin{equation} mathbf{Ax = b} tag{eq.1} end{equation}Donde $ mathbf{A}$ es la matriz de coeficientes . begin{equation} mathbf{A}= left[ begin{array}{cccc} a_{1,1} &amp; a_{1,2} &amp; cdots &amp; a_{1, n} a_{2,1} &amp; a_{2,2} &amp; cdots &amp; a_{2, n} vdots &amp; vdots &amp; &amp; vdots a_{n, 1} &amp; a_{n, 2} &amp; cdots &amp; a_{n, n} end{array} right] end{equation}$ mathbf{x}$ es el vector de variables desconocidas . begin{equation} mathbf{x}= left[ begin{array}{c} x_1 x_2 vdots x_n end{array} right] end{equation}Y $ mathbf{b}$ es el vector de constantes a las cuales están igualadas las ecuaciones . begin{equation} mathbf{b}= left[ begin{array}{c} b_1 b_2 vdots b_n end{array} right] end{equation} Soluci&#243;n matricial de un sistema . Mediante el tratamiento algebraico de la $(eq.1)$ podemos despejar $ mathbf{x}$ . begin{equation} mathbf{x = A^{-1}b} tag{eq.2} end{equation}De forma que para hallar nuestro vector de variables desconociadas $ mathbf{x}$, simplemente debemos encontrar la matriz inversa de nuestra matriz $ mathbf{A}$ y multiplicarla por el vector $ mathbf{b}$ . Ejemplo de soluci&#243;n . Soluci&#243;n paso a paso . Suponga usted que se desea resolver el siguiente sistema de ecuaciones lineales: . begin{equation} begin{aligned} x_1+2 x_2-x_3 &amp;=5 -x_1+3 x_2+x_3 &amp;=-2 x_1-x_2+x_3 &amp;=3 end{aligned} end{equation}Como primer paso debemos crear nuestra matriz $ mathbf{A}$ y nuestros vector $ mathbf{b}$ en base a los coheficientes de las ecuaciones: . import numpy as np &quot;&quot;&quot; Vamos a crear una matriz uzando np.array ya que si no la usamos se nos definiria como una lista y no una matriz lo cual puede causar conflictos mas adelante en el codigo &quot;&quot;&quot; A=np.array([[1,2,-1], [-1,3,1], [1,-1,1]]) b=np.array([5,-2,3]) . Ahora según lo deducido en la $(eq.2)$ simplemente debemos hallar la matriz inversa de $ mathbf{A}$ y multiplicarla por $ mathbf{b}$ . invA=np.linalg.inv(A) #ahora multiplicamos invA por b para obtener x x=invA@b print(x) . [ 3.7 0.6 -0.1] . De esta manera hemos solucionado el sistema, ahora bien, nótese que hemos descrito el proceso de solución paso a paso con el fin de que este sea más comprensible, sin embargo esto no nos impide realizar esta misma solución de una forma mas eficiente compactándola en una sola línea . x=(np.linalg.inv(A))@b print(x) . [ 3.7 0.6 -0.1] . Soluci&#243;n usando numpy . Si bien es fundamental el conocer el paso a paso que nos lleva a la solución de un sistema, a nivel de aplicación los sistemas lineales en la mayoría de ocasiones no son el centro de estudio de un problema, sino mas bien una herramienta para la solución del mismo, es decir, puede que para encontrar la solución a un problema de aplicación, sea necesaria la resolución de uno o varios sistemas de ecuaciones lineales para obtener incógnitas valiosas que sean parte de ese problema. . Es por esto que surge la necesitad de saber solucionar estos sistemas de manera rápida y precisa , ya que en la mayoría de los casos son simplemente parte de un problema mas grande, por esto se muestra a continuación como obtener estas soluciones de manera ágil mediante el uso del solver de la librería Numpy: . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import numpy as np x=np.linalg.solve(A,b) print(x) . [ 3.7 0.6 -0.1] . Referencias . texto en cursiva La teoría usada en este blog fue tomada de: . Dorfman, K. D. &amp; Daoutidis, P. (2017). Numerical Methods with Chemical Engineering Applications. Cambridge University Press. | . &lt;/div&gt; .",
            "url": "https://chemengpythonuis.github.io/PyChemEng/jupyter/2021/11/28/SEL.html",
            "relUrl": "/jupyter/2021/11/28/SEL.html",
            "date": " • Nov 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chemengpythonuis.github.io/PyChemEng/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://chemengpythonuis.github.io/PyChemEng/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Sobre PyChemEng",
          "content": "El corazón de la ingeniería química, al igual que el resto de las ingenierías, radica en el análisis y solución de diversos problemas, desde conocer las concentraciones de los reactivos en un reactor hasta la predicción del comportamiento de variables termodinámicas, estos y muchos otros dilemas pueden ser expresados y solucionados matemáticamente. En algunas oportunidades dichos problemas pueden ser abordados de forma analítica, sin embargo, en la gran mayoría de ocasiones estos deben enfrentarse de forma numérica, lo cual representa un gran reto. . PyChem es un esfuerzo colaborativo para dominar las herramientas de análisis numérico que son de tanta utilidad dentro de la ingeniería química, un compendio de códigos abordados en la materia de Métodos en Ingeniería Química impartida por la Escuela de Ingeniería Química de la Universidad Industrial de Santander mediante la cual se busca brindar las herramientas adecuadas para el correcto dominio y solución de dichos retos. Escrito en Python, este compendio en forma de repositorio no solo traduce códigos de vital importancia de MATLAB, además, presenta nuevos enfoques mediante el uso intuitivo de herramientas como Google Colab y Jupyter Notebook. . Principales colaboradores: . . . . .",
          "url": "https://chemengpythonuis.github.io/PyChemEng/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chemengpythonuis.github.io/PyChemEng/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}